rt_map
for(i in 1:length(rt_counts$well_id)){
print(as.numeric(rt_counts$well_id[i]))
rt_vec[rt_counts$well_id[i]] <- rt_counts$count[i]
}
for(i in 1:length(rt_counts$well_id)){
rt_vec[as.numeric(rt_counts$well_id[i]),1] <- rt_counts$count[i]
}
for(i in 1:length(rt_counts$well_id)){
rt_vec[as.numeric(rt_counts$well_id[i]),1] <- rt_counts$count[i]
}
for(i in 1:length(rt_counts$well_id)){
rt_vec[as.numeric(rt_counts$well_id[i]),"counts"] <- rt_counts$count[i]
}
rt_map
for(i in 1:length(rt_counts$well_id)){
rt_vec[as.numeric(rt_counts$well_id[i]),"count"] <- rt_counts$count[i]
}
# Convert into a x by x matrix for plotting
# Create empty array and insert values
# There is a really annoying type error here and the array is not assigning
rt_map <- data.frame(counts = rep(0, 48))
for(i in 1:length(rt_counts$well_id)){
rt_map[as.numeric(rt_counts$well_id[i]),"count"] <- rt_counts$count[i]
}
rt_map
rt_counts
rt_map
length(rt_counts$well_id)
rt_locs
rt_layout <- seq(1:48)
rt_layout
table(rt_counts)[names(table(rt_counts)) == 4] # Count number of elements equal to certain value
table(rt_counts)[names(table(rt_counts)) == 10] # Count number of elements equal to certain value
table(rt_counts)
table(rt_counts)
table(rt_locs)[names(table(rt_locs)) == 10] # Count number of elements equal to certain value
table(rt_locs)[names(table(rt_locs)) == 8] # Count number of elements equal to certain value
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == 8] # Count number of elements equal to certain value
count_row = data.frame("well_position" = i, counts = coutn)
rt_counts_layout = cbind(rt_counts_layout, count_row)
}
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == 8] # Count number of elements equal to certain value
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = cbind(rt_counts_layout, count_row)
}
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == 8] # Count number of elements equal to certain value
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
rt_counts_layout
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == i] # Count number of elements equal to certain value
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == i] # Count number of elements equal to certain value
print(i)
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == i] # Count number of elements equal to certain value
if(identical(count, integer(0))){count = 0}
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
identical(count, integer(0))
count = table(rt_locs)[names(table(rt_locs)) == 10] # Count number of elements equal to certain value
count
identical(count, integer(0))
length(count)
if(length(count == 0)){count = 0}
count
length(count)==0
if(length(count)==0){count = 0}
count
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == 10] # Count number of elements equal to certain value
if(length(count)==0){count = 0}
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
rt_counts_layout
# extract the counts, reorder and identify and fill in 0s
rt_counts_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
count = table(rt_locs)[names(table(rt_locs)) == i] # Count number of elements equal to certain value
if(length(count)==0){count = 0}
count_row = data.frame("well_position" = i, counts = count)
rt_counts_layout = rbind(rt_counts_layout, count_row)
}
rt_counts_layout
# Convert into a x by x matrix for plotting
# RT is 4x12
rt_loc_mat <- matrix(rt_counts_layout$counts, nrow = 4, ncol = 12)
rt_loc_mat
# Convert into a x by x matrix for plotting
# RT is 4x12
rt_loc_mat <- matrix(rt_counts_layout$counts, nrow = 4, ncol = 12, byrow = TRUE)
rt_loc_mat
## For the heatmp, I need to know if there are any 0s -> send to NA
# Heatmap # Make square, Set heatmap limits
png(file=paste0(output_folder, '/',exp_name ,"/gplots/rt_barcoding_layout.png",
width = 240, height = 480, units = "px"))
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
library(ComplexHeatmap)
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
# Counts pal
pal_1 <- RColorBrewer::brewer.pal(9, "Greens")
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
# Counts pal
pal_1 <- colorRamp2(c(0,1,max(rt_counts_layout$counts)), c("gray", "floralwhite", "forestgreen"))
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
library(circlize)
# Counts pal
pal_1 <- colorRamp2(c(0,1,max(rt_counts_layout$counts)), c("gray", "floralwhite", "forestgreen"))
Heatmap(rt_loc_mat,
cluster_columns = F,
cluster_rows = F,
col = pal_1,
rect_gp = gpar(col = "black", lwd = 1),
column_title = "RT Barcodes",
heatmap_legend_param = list(
title = "cell number")
)
devtools::document()
devtools::load_all()
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
# Make the heatmaps
generate_barcoding_heatmaps(sce_split = sce_split_lab_filt,
output_folder = output_folder_abs,
exp_name = exp_name)
devtools::load_all()
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
devtools::load_all()
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
8*12
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
rt_locs
# Combine the UMI count with the locs
umi_rt <- data.frame(rt_id = rt_locs, umi = sce$total)
umi_rt
# Summarize median by id
med_umi_rt <- umi_rt %>% group_by(rt_id) %>% summarise(median(umi))
med_umi_rt
umi_rt <- data.frame(rt_id = rt_locs, umi = sce$total)
# Summarize median by id
med_umi_rt <- umi_rt %>% group_by(rt_id) %>% summarise(median(umi))
# extract the counts, reorder and identify and fill in 0s
rt_umi_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
umi_count = table(med_umi_rt$`median(umi)`)[names(table(med_umi_rt$`median(umi)`)) == i] # Count number of elements equal to certain value
if(length(umi_count)==0){umi_count = 0}
count_row = data.frame("well_position" = i, counts = umi_count)
rt_umi_layout = rbind(rt_umi_layout, count_row)
}
rt_umi_mat <- matrix(rt_umi_layout$counts, nrow = 4, ncol = 12, byrow = TRUE)
rt_umi_mat
med_umi_rt
med_umi_rt$`median(umi)`[5]
med_umi_rt$`median(umi)`[10]
which(med_umi_rt$rt_id == 10)
which(med_umi_rt$rt_id == 11)
# Combine the UMI count with the locs
umi_rt <- data.frame(rt_id = rt_locs, umi = sce$total)
# Summarize median by id
med_umi_rt <- umi_rt %>% group_by(rt_id) %>% summarise(median(umi))
# extract the counts, reorder and identify and fill in 0s
rt_umi_layout <- data.frame("well_position" = NULL, counts = NULL)
for(i in 1:48){
umi_count = med_umi_rt$`median(umi)`[which(med_umi_rt$rt_id == i)] # Count number of elements equal to certain value
if(length(umi_count)==0){umi_count = 0}
count_row = data.frame("well_position" = i, counts = umi_count)
rt_umi_layout = rbind(rt_umi_layout, count_row)
}
rt_umi_mat <- matrix(rt_umi_layout$counts, nrow = 4, ncol = 12, byrow = TRUE)
rt_umi_mat
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
load_all("../splitRtools/")
run_split_pipe(mode = 'single',
n_sublibs = 1,
data_folder = "~/Desktop/tape_lab/split_tools/test_data_sp_5_miseq/",
output_folder = "~/Desktop/tape_lab/split_tools/testing_outputs/",
fastq_path = "../fastq/",
)
# Testing script for split pipeline
library(devtools)
devtools::install(".")
devtools::document(".")
devtools::document(".")
devtools::install(".")
library(splitRtools)
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = ".", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "barcodes_v1.csv", # RT barcode map
lig_bc = "barcodes_v1.csv", # Ligation barcode map
sample_map = "cell_metadata.xlsx" # RT plate layout file
)
# Testing script for split pipeline
library(devtools)
devtools::install("../splitRtools/") # This is the local version
# Load splitRtools
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = ".", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "barcodes_v1.csv", # RT barcode map
lig_bc = "barcodes_v1.csv", # Ligation barcode map
sample_map = "cell_metadata.xlsx" # RT plate layout file
)
# Testing script for split pipeline
library(devtools)
devtools::install("../splitRtools/") # This is the local version
# Load splitRtools
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = ".", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "barcodes_v1.csv", # RT barcode map
lig_bc = "barcodes_v1.csv", # Ligation barcode map
sample_map = "cell_metadata.xlsx" # RT plate layout file
)
getwd()
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "barcodes_v1.csv", # RT barcode map
lig_bc = "barcodes_v1.csv", # Ligation barcode map
sample_map = "cell_metadata.xlsx" # RT plate layout file
)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "barcodes_v1.csv", # RT barcode map
lig_bc = "barcodes_v1.csv", # Ligation barcode map
sample_map = "cell_metadata.xlsx" # RT plate layout file
)
# Testing script for split pipeline
library(devtools)
devtools::install("../splitRtools/") # This is the local version
# Load splitRtools
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../../../2021_08_19_split_5_analysis/miseq_s2/fastq/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../fastq_single/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
# Testing script for split pipeline
library(devtools)
devtools::install("../splitRtools/") # This is the local version
# Load splitRtools
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../fastq_single/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'single', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../fastq_single/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
# Testing script for split pipeline
library(devtools)
devtools::install("../splitRtools/") # This is the local version
# Load splitRtools
library(splitRtools)
# Run the mrna split-cite-1 sample
# Always point to a parent folder containing the sublibrary folder
# Each sublibrary is within this folder and must contain zUMIs output
run_split_pipe(mode = 'merge', # One or more sublibraries
n_sublibs = 2, # How many to merge
data_folder = "./../test_data_sp_5_miseq/", # Location of data directory
output_folder = "../test_data_sp_5_miseq_outputs/", # Output path
filtering_mode = "knee", # Filter by knee (standard) or manual value, default 1000 transcripts
fastq_path = "../fastq_single/", # Raw FastQ path
rt_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # RT barcode map
lig_bc = "../test_data_sp_5_miseq/barcodes_v1.csv", # Ligation barcode map
sample_map = "../test_data_sp_5_miseq/cell_metadata.xlsx" # RT plate layout file
)
devtools::install_github("https://github.com/JamesOpz/splitRtools")
rev("CGAATGCTCTGGCCTCTCAAGCACGTGGAT")
stringi::stri_reverse("CGAATGCTCTGGCCTCTCAAGCACGTGGAT")
stringi::stri_reverse("ATCCACGTGCTTGAGAGGCCAGAGCATTCG")
